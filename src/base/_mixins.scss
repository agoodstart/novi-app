@use "sass:map";
@use "sass:math";
@use "sass:color";
@use "./variables";

@mixin alpha($color, $colorvalue) {
  $i: 95;

  @while $i > 10 {
    .text-#{$color}-alpha-#{$i} {
      color: transparentize($colorvalue, math.div(100 - $i, 100));
    }

    .bg-#{$color}-alpha-#{$i} {
      background-color: transparentize($colorvalue, math.div(100 - $i, 100));
    }

    $i: $i - 5;
  };
}

@mixin button(
  $font-size: 2.2rem,
  $padding: 1rem 3.5rem,
  $border-radius: 10rem
) {
  display: inline-block;
  cursor: pointer;
  border: 0;
  text-decoration: none;
  font-family: inherit;
  font-size: $font-size;
  padding: $padding;
  color: #FCF7F8;
  border-radius: $border-radius;

  &:active {
    outline: none;
    border: none;
  }

  &:focus {
    outline: 0;
  }

  &:disabled {
    cursor: default;
    background-color: -internal-light-dark(rgba(239, 239, 239, 0.3), rgba(19, 1, 1, 0.3)) !important;
    color: -internal-light-dark(rgba(16, 16, 16, 0.3), rgba(255, 255, 255, 0.3)) !important;
    border-color: -internal-light-dark(rgba(118, 118, 118, 0.3), rgba(195, 195, 195, 0.3)) !important;
  }
}

@mixin elevation($element: "box") {
  @each $key, $value in variables.$shadows {
    .elevation-#{$key} {
      @if $element == "box" {
        box-shadow: $value;
      } @else {
        text-shadow: $value;
      }
    }
  }
}

@mixin sizes {
  &--width-auto {
    width: auto;
  }

  &--height-auto {
    height: auto;
  }

  @for $i from 1 through 20 {
    &--width-#{$i * 5} {
      width: percentage(math.div($i * 5, 100));
    }

    &--height-#{$i * 5} {
      height: percentage(math.div($i * 5, 100));
    }

    &--border-radius-#{$i * 5} {
      border-radius: #{$i * 5} + px;
    }

    &--padding-#{$i * 5} {
      padding: #{$i * 5} + px;
    }
  }
}

@mixin gaps {
  $i: 5;

  @while $i < 50 {
    .gap-rows-#{$i} {
      row-gap: $i + px;
    }

    .gap-columns-#{$i} {
      column-gap: $i + px;
    }

    $i: $i - 5;
  };
}