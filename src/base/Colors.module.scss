@use "sass:map";
@use "sass:math";
@use "sass:color";

// COLORS
$emerald: #0cce6b;
$fireopal: #ef6461;
$electricblue: #87f6ff;
$goldmetallic: #DEB841;

$opal: #85BDBF;
$white: #FCF7F8;
$black: #11151C;

@mixin alpha($color, $colorvalue) {
  $i: 95;

  @while $i > 10 {
    .text-#{$color}-alpha-#{$i} {
      color: transparentize($colorvalue, math.div(100 - $i, 100));
    }

    .bg-#{$color}-alpha-#{$i} {
      background-color: transparentize($colorvalue, math.div(100 - $i, 100));
    }

    $i: $i - 5;
  };
}

@function create_color_map($colorvalue, $percentage) {
  $map: ();

  $color-map: (
    "main": $colorvalue,
    "light": mix($white, $colorvalue, $percentage),
    "dark": mix($black, $colorvalue, $percentage),
  );

  @return $color-map;
}

$colors-map: (
  "primary": create_color_map($emerald, 15%),
  "secondary": create_color_map($fireopal, 15%),
  "tertiary": create_color_map($electricblue, 15%),
  "quaternary": create_color_map($goldmetallic, 15%),

  "gray": create_color_map($opal, 15%)
);

@each $color, $colormapping in $colors-map {
  @each $colorvariation, $colorvalue in $colormapping {

    .text-#{$color}-#{$colorvariation} {
      color: $colorvalue;
    }

    .bg-#{$color}-#{$colorvariation} {
      background-color: $colorvalue;
    }

    @if($colorvariation == "dark") {
      @include alpha($color, $colorvalue);
    }
  }
}

.text {
  &-white {
    color: $white;
  }

  &-black {
    color: $black;
  }
}

.bg {
  &-white {
    background-color: $white;
  }

  &-black {
    background-color: $black;
  }
}

@include alpha("black", $black);
// @error darken(#f44336, 20%);